#!/usr/bin/env python2

# Copyright (C) 2015-2018 East Asian Observatory
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,51 Franklin
# Street, Fifth Floor, Boston, MA  02110-1301, USA

"""
make_proj_def - Export project definition file from Hedwig database

Usage:
    make_proj_def [-v | -q] --facility <facility> --semester <semester> --queue <queue> --type <type>
        [--output <filename>]
        [--output-affiliations <filename>]
        [--output-targets <filename>]
        [--output-notes <filename>]
        [--output-feedback <filename>]
        [--output-publications <filename>]
        [--output-json <filename]
        [--include-exempt-affiliations]
        [--skip-unknown-cois]
        [--state <state>]
        [--decision-accept]
    make_proj_def [-v | -q] --facility <facility> --project <project>
        [--output <filename>]
        [--output-affiliations <filename>]
        [--output-targets <filename>]
        [--output-notes <filename>]
        [--output-feedback <filename>]
        [--output-publications <filename>]
        [--output-json <filename]
        [--include-exempt-affiliations]
        [--skip-unknown-cois]

Options:

    --facility <facility>             Facility code
    --semester <semester>             Semester code
    --queue <queue>                   Queue code
    --type <type>                     Call type code
    --project <project>               Specific project identifier
    --output, -o <filename>           Output filename
    --output-affiliations <filename>  File to which to write affiliations
    --output-targets <filename>       File to which to write targets
    --output-notes <filename>         File to which to write TAC notes
    --output-feedback <filename>      File to which to write TAC feedback
    --output-publications <filename>  File to which to write publication information
    --output-json <filename>          File to which to write proposal list as JSON
    --include-exempt-affiliations     Include affiliations for exempt proposals
    --skip-unknown-cois               Don't abort when CoIs not recognised
    --state <state>                   Select proposals of given state [default: accepted]
    --decision-accept                 Select only proposals marked as being accepted
    --verbose, -v                     Increase verbosity
    --quiet, -q                       Decreate verbosity
"""

from __future__ import absolute_import, division, print_function, \
    unicode_literals

from codecs import utf_8_decode
from collections import OrderedDict
from contextlib import contextmanager
import logging
import sys

from docopt import docopt

from hedwig.config import get_database, get_facilities
from hedwig.error import NoSuchValue
from hedwig.util import get_logger
from hedwig.type.enum import Assessment, FormatType, ProposalState
from hedwig.type.simple import ProposalText

from hedwig2omp.config import get_config
from hedwig2omp.affiliation_file import write_affiliation_file
from hedwig2omp.notes_file import write_notes_file
from hedwig2omp.prev_prop_pub import write_prev_prop_pub
from hedwig2omp.project_ini import write_project_ini
from hedwig2omp.project_list_json import write_json_file
from hedwig2omp.target_file import write_target_file
from hedwig2omp.type import Project
from hedwig2omp.user import UserDB


def main():
    args = docopt(__doc__)

    telescope = args['--facility']

    logging.basicConfig(level=(logging.DEBUG if args['--verbose']
                               else (logging.WARNING if args['--quiet']
                                     else logging.INFO)))
    logger = get_logger('make_proj_def')

    logger.debug('Reading configuration')
    config = get_config()

    logger.debug('Reading user lookup table')
    users = UserDB().get_all_users()

    logger.debug('Connecting to Hedwig database')
    db = get_database()
    (facility_class,) = get_facilities(facility_spec=telescope)
    facility_id = db.ensure_facility(facility_class.get_code())
    facility = facility_class(facility_id)

    with_json = (args['--output-json'] is not None)

    query_kwargs = {
        'facility_id': facility_id,
        'decision_accept': (True if args['--decision-accept'] else None),
        'with_members': True,
        'with_reviewers': True,
        'with_review_info': True,
        'with_review_text': True,
        'with_decision': True,
        'with_decision_note': True,
        'with_categories': with_json,
    }

    if args['--project'] is None:
        if args['--state'].lower() == 'any':
            # Assume "any" means any submitted state.
            state = ProposalState.submitted_states()
        else:
            state = ProposalState.by_name(args['--state'])
            if state is None:
                logger.error('State "{}" not recognised', args['--state'])
                sys.exit(1)

        try:
            call_type = facility.get_call_types().by_code(
                None if args['--type'] == 'NONE' else args['--type'])
        except NoSuchValue:
            logger.error('Type "{}" not recognised', args['--type'])
            sys.exit(1)

        semester_code = utf_8_decode(args['--semester'])[0]
        queue_code = utf_8_decode(args['--queue'])[0]

        logger.debug('Finding proposals for this call')
        proposal_collection = db.search_proposal(
            call_type=call_type,
            semester_code=semester_code,
            queue_code=queue_code,
            state=state,
            **query_kwargs)

    else:
        logger.debug('Searching for specific proposal by identifier')

        project_code = utf_8_decode(args['--project'])[0]
        proposal_collection = db.search_proposal(
            proposal_id=facility.parse_proposal_code(db, project_code),
            **query_kwargs)

        proposal = proposal_collection.get_single()
        semester_code = proposal.semester_code
        queue_code = proposal.queue_code

    logger.debug('Determining OMP country code')
    if config.has_option('queue_country', queue_code):
        country = config.get('queue_country', queue_code)
    else:
        country = queue_code

    proposals = []
    proposal_details = {}
    n_err = 0
    call_id = None
    queue_id = None
    affiliations = None
    affiliation_codes = {}
    affiliation_names = {}
    assignments = OrderedDict()
    targets = OrderedDict()
    notes = OrderedDict()
    feedback = OrderedDict()
    prev_proposals = OrderedDict()
    role_class = facility.get_reviewer_roles()

    facility.attach_review_extra(db, proposal_collection)

    proposal_ids = [x.id for x in proposal_collection.values()]
    if (args['--output'] is not None) or with_json:
        if telescope == 'JCMT':
            jcmt_allocations = db.search_jcmt_allocation(proposal_id=proposal_ids)
    if with_json:
        if telescope == 'JCMT':
            jcmt_requests = db.search_jcmt_request(proposal_id=proposal_ids)
            jcmt_options = db.search_jcmt_options(proposal_id=proposal_ids)
    if (args['--output-targets'] is not None) or with_json:
        all_targets = db.search_target(proposal_id=proposal_ids)
    if (args['--output-publications'] is not None) or with_json:
        all_prev_proposals = db.search_prev_proposal(proposal_id=proposal_ids)

    for proposal in proposal_collection.values():
        to_delete = []
        for member in proposal.members.values():
            if member.affiliation_name == 'Invalid':
                logger.warning('Skipping "invalid" affiliation person {} ({})',
                               member.person_id, member.person_name)
                to_delete.append(member.id)
        for member_id in to_delete:
            del proposal.members[member_id]

    for proposal in proposal_collection.values():
        code = facility.make_proposal_code(db, proposal)

        if with_json:
            # Add proposal details to the list.
            proposal_detail = proposal._asdict()
            proposal_details[code] = proposal_detail

            # Replace state enum value with a names.
            proposal_detail['state'] = ProposalState.get_name(proposal.state)

        if ((args['--output'] is not None)
                or (args['--output-affiliations'] is not None) or with_json):
            # Fetch affiliation information from the database if we don't have
            # it already.
            if affiliations is None:
                call_id = proposal.call_id
                queue_id = proposal.queue_id
                affiliations = db.search_affiliation(
                    queue_id=queue_id, hidden=False,
                    with_weight_call_id=call_id)

                # Make lookup table for the JSON output.
                affiliation_names[0] = 'Unknown'
                for affiliation in affiliations.values():
                    affiliation_names[affiliation.id] = affiliation.name

                # Make lookup table for the affiliations and project files.
                affiliation_codes[0] = 'zz'
                for affiliation_code in config.options('affiliation_code'):
                    affiliation_name = config.get(
                        'affiliation_code', affiliation_code)
                    for affiliation in affiliations.values():
                        if affiliation.name == affiliation_name:
                            affiliation_codes[affiliation.id] = \
                                affiliation_code

            elif ((call_id != proposal.call_id) or
                    (queue_id != proposal.queue_id)):
                logger.error('Call or queue mismatch')
                sys.exit(1)

            # Compute affiliation fractions.
            proposal_assignment = facility.calculate_affiliation_assignment(
                db, proposal.members, affiliations)

            if (args['--include-exempt-affiliations']
                    or not proposal.decision_exempt):
                assignments[code] = proposal_assignment

            if with_json:
                proposal_detail['affiliation_assignment'] = {
                    affiliation_names.get(k, 'Bad value'): v
                    for (k, v) in proposal_assignment.items()}

        # Process member list.
        pi = None
        pi_affiliation = None
        cois = []
        coi_affiliation = []
        member_pi = None
        member_cois = []

        if (args['--output'] is not None) or with_json:
            for member in proposal.members.values():
                # Record actual member objects for JSON output.
                is_pi = member.pi and (member_pi is None)

                if is_pi:
                    member_pi = member
                else:
                    member_cois.append(member)

                # Attempt to get OMP ID for OMP project file output.
                omp_id = users.get(member.person_id)
                if omp_id is None:
                    if args['--skip-unknown-cois']:
                        logger.warning('Unknown Hedwig user {} ({})',
                                       member.person_id, member.person_name)
                    else:
                        logger.error('Unknown Hedwig user {} ({})',
                                     member.person_id, member.person_name)
                        n_err += 1
                    continue

                affiliation_code = affiliation_codes.get(member.affiliation_id)
                if affiliation_code is None:
                    logger.error('Unknown affiliation: {}', member.affiliation_id)
                    n_err += 1
                    continue

                if is_pi:
                    pi = omp_id
                    pi_affiliation = affiliation_code
                else:
                    cois.append(omp_id)
                    coi_affiliation.append(affiliation_code)

            if member_pi is None:
                logger.error('No PI for project {}', code)
                n_err += 1

            # Fetch allocation.
            if telescope == 'JCMT':
                allocation = jcmt_allocations.subset_by_proposal(proposal.id)
                if not allocation:
                    if ((args['--output'] is not None)
                            or (proposal.state == ProposalState.ACCEPTED)):
                        logger.error('No allocation for project {}', code)
                        n_err += 1
                    else:
                        logger.warning('No allocation for project {}', code)
                allocation_total = allocation.get_total()
                bands = [
                    x for x in range(1, 6)
                    if allocation_total.weather.get(x, False)]
            else:
                allocation = None
                from collections import namedtuple
                DummyTotal = namedtuple('DummyTotal', ['total'])
                allocation_total = DummyTotal(total=0.0)
                bands = []

            # Compute priority, using formula suggested by IMC:
            #     OMP priority = 300 - 4 * (TAC_rating - 50)
            rating = facility.calculate_overall_rating(proposal.reviewers)
            priority = 600 if rating is None else int(500.0 - (4.0 * rating))

            proposals.append(Project(
                code=code,
                country=country,
                pi=pi,
                pi_affiliation=pi_affiliation,
                cois=cois,
                coi_affiliation=coi_affiliation,
                title=proposal.title,
                bands=bands,
                allocation=allocation_total.total,
                tagpriority=priority,
                support=''))

            if with_json:
                del proposal_detail['member']
                del proposal_detail['members']
                del proposal_detail['reviewer']
                del proposal_detail['reviewers']

                proposal_detail['omp_pi'] = pi
                proposal_detail['omp_cois'] = cois
                proposal_detail['omp_bands'] = bands
                proposal_detail['omp_priority'] = priority
                proposal_detail['rating'] = rating
                proposal_detail['allocation'] = allocation
                proposal_detail['member_pi'] = member_pi
                proposal_detail['member_cois'] = member_cois
                if telescope == 'JCMT':
                    proposal_detail['request'] = \
                        jcmt_requests.subset_by_proposal(proposal.id)
                    proposal_detail['jcmt_options'] = \
                        jcmt_options.subset_by_proposal(
                            proposal.id).get_single(default=None)

                reviews_technical = proposal.reviewers.values_by_role(
                    role_class.TECH)
                proposal_detail['review_technical'] = (
                    None if (len(reviews_technical) != 1) else
                    reviews_technical[0]._replace(
                        review_assessment=Assessment.get_name(
                            reviews_technical[0].review_assessment)))

        if (args['--output-targets'] is not None) or with_json:
            # Fetch target information from the database.
            proposal_targets = all_targets.subset_by_proposal(proposal.id)
            targets[code] = proposal_targets

            if with_json:
                proposal_detail['targets'] = proposal_targets

        if (args['--output-notes'] is not None) and proposal.decision_note:
            notes[code] = ProposalText(text=proposal.decision_note,
                                       format=proposal.decision_note_format)

        if (args['--output-feedback'] is not None):
            feedback_reviews = proposal.reviewers.values_by_role(
                role_class.FEEDBACK)
            if len(feedback_reviews) == 1:
                feedback[code] = ProposalText(
                    text=feedback_reviews[0].review_text,
                    format=feedback_reviews[0].review_format)
            elif len(feedback_reviews) > 1:
                feedback[code] = ProposalText(
                    text='Multiple feedback messages: please view online.',
                    format=FormatType.PLAIN)

        if (args['--output-publications'] is not None) or with_json:
            proposal_prev_proposals = \
                all_prev_proposals.subset_by_this_proposal(proposal.id)
            prev_proposals[code] = proposal_prev_proposals

            if with_json:
                proposal_detail['prev_proposals'] = proposal_prev_proposals

    if n_err:
        logger.info('Aborting due to {} error(s)', n_err)
        sys.exit(1)

    if args['--output'] is not None:
        logger.debug('Writing project definition file')
        with file_or_stdout(args['--output'], 'wb') as file_:
            write_project_ini(file_, telescope, semester_code, proposals)

    if args['--output-affiliations'] is not None:
        logger.debug('Writing affiliations file')
        with file_or_stdout(args['--output-affiliations']) as file_:
            write_affiliation_file(file_, affiliation_codes, assignments)

    if args['--output-targets'] is not None:
        logger.debug('Writing targets file')
        with file_or_stdout(args['--output-targets']) as file_:
            write_target_file(file_, targets)

    if args['--output-notes'] is not None:
        logger.debug('Writing notes file')
        with file_or_stdout(args['--output-notes']) as file_:
            write_notes_file(file_, notes)

    if args['--output-feedback'] is not None:
        logger.debug('Writing feedback file')
        with file_or_stdout(args['--output-feedback']) as file_:
            write_notes_file(file_, feedback)

    if args['--output-publications'] is not None:
        logger.debug('Writing previous proposal publications')
        with file_or_stdout(args['--output-publications']) as file_:
            write_prev_prop_pub(file_, prev_proposals)

    if with_json:
        logger.debug('Writing proposal list in JSON format')
        with file_or_stdout(args['--output-json']) as file_:
            write_json_file(file_, proposal_details)


@contextmanager
def file_or_stdout(filename, mode='w'):
    if filename == '-':
        yield sys.stdout

    else:
        with open(filename, mode) as file_:
            yield file_


if __name__ == '__main__':
    main()
