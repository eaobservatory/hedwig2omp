#!/usr/bin/env python2

# Copyright (C) 2015-2018 East Asian Observatory
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,51 Franklin
# Street, Fifth Floor, Boston, MA  02110-1301, USA

"""
match_users - Attempt to match Hedwig users to OMP accounts

Usage:
    match_users [-v | -q] --facility <facility> --semester <semester> --queue <queue> --type <type>
        [--state <state>]
        [--skip-unregistered]
        [--decision-accept]
        [--search-inferred]
    match_users [-v | -q] --facility <facility> --project <project>
        [--skip-unregistered]

Options:

    --facility <facility>    Facility code
    --semester <semester>    Semester code
    --queue <queue>          Queue code
    --type <type>            Call type code
    --project <project>      Specific project identifier
    --state <state>          Select proposals of given state [default: accepted]
    --skip-unregistered, -r  Skip unregistered proposal members
    --decision-accept        Select only proposals marked as being accepted
    --search-inferred        Show matches for OMP-inferred name
    --verbose, -v            Increase verbosity
    --quiet, -q              Decreate verbosity
"""

from __future__ import absolute_import, division, print_function, \
    unicode_literals

from codecs import ascii_encode, utf_8_decode
import logging
import sys
import unicodedata

from docopt import docopt

from hedwig.compat import first_value
from hedwig.config import get_database, get_facilities
from hedwig.error import NoSuchValue
from hedwig.util import get_logger
from hedwig.type.enum import ProposalState

from hedwig2omp.config import get_config
from hedwig2omp.omp import OMPDB
from hedwig2omp.user import UserDB


def main():
    args = docopt(__doc__)

    telescope = args['--facility']

    logging.basicConfig(level=(logging.DEBUG if args['--verbose']
                               else (logging.WARNING if args['--quiet']
                                     else logging.INFO)))
    logger = get_logger('match_users')

    logger.debug('Reading user lookup table')
    user_db = UserDB()
    users = user_db.get_all_users()

    logger.debug('Reading users from the OMP')
    omp_users_by_email = OMPDB().get_users_by_email()
    omp_user = {k.lower(): v.id for (k, v) in omp_users_by_email.items()}

    taco_omp = None
    omp_user_ids = None
    if args['--search-inferred']:
        from taco import Taco
        taco_omp = Taco('perl')
        taco_omp.import_module('JAC::Setup', 'omp')
        taco_omp.import_module('OMP::User')
        omp_user_ids = sorted(omp_users_by_email.values())

    logger.debug('Connecting to Hedwig database')
    db = get_database()
    facility_info = first_value(get_facilities(facility_spec=telescope))
    facility = facility_info.view

    query_kwargs = {
        'facility_id': facility_info.id,
        'with_members': True,
    }

    if args['--project'] is None:
        semester_code = utf_8_decode(args['--semester'])[0]
        queue_code = utf_8_decode(args['--queue'])[0]

        state = ProposalState.by_name(args['--state'])
        if state is None:
            logger.error('State "{}" not recognised', args['--state'])
            sys.exit(1)

        try:
            call_type = facility.get_call_types().by_code(
                None if args['--type'] == 'NONE' else args['--type'])
        except NoSuchValue:
            logger.error('Type "{}" not recognised', args['--type'])
            sys.exit(1)

        logger.debug('Finding proposals for this call')

        proposal_collection = db.search_proposal(
            semester_code=semester_code,
            queue_code=queue_code,
            call_type=call_type,
            state=state,
            decision_accept=(True if args['--decision-accept'] else None),
            **query_kwargs)
    else:
        logger.debug('Searching for specific proposal by identifier')

        project_code = utf_8_decode(args['--project'])[0]
        proposal_collection = db.search_proposal(
            proposal_id=facility.parse_proposal_code(db, project_code),
            **query_kwargs)

    considered = set()
    for proposal in proposal_collection.values():
        for member in proposal.members.values():
            if args['--skip-unregistered'] and not member.person_registered:
                continue

            person_id = member.person_id
            if person_id in considered:
                continue
            considered.add(person_id)

            if person_id in users:
                logger.debug('User already recognised: {} ({} = {})',
                             person_id, member.person_name,
                             users[person_id])
                continue

            # Look for direct email matches between this person and the OMP.
            addresses = []
            for email in db.search_email(person_id=person_id).values():
                address = email.address
                addresses.append(address)
                omp_id = omp_user.get(address.lower())
                if omp_id is None:
                    continue

                logger.info('Found match by email address: {} ({} = {}, {})',
                            person_id, member.person_name, omp_id, address)

                response = raw_input(
                    'Store OMP ID {} for {} [y/N]: '.format(
                        omp_id,
                        ascii_encode(member.person_name, 'replace')[0]))
                if response.upper().startswith('Y'):
                    user_db.add_user(person_id, omp_id)
                    break

            else:
                # Attempt to cross-reference with other Hedwig users by email.
                for email in db.search_email(person_id=None,
                                             address=addresses).values():
                    if email.person_id == person_id:
                        continue

                    omp_id = users.get(email.person_id)
                    if omp_id is None:
                        continue

                    logger.info('Found possible cross-reference: '
                                '{} = {} ({} = {}, {})',
                                person_id, email.person_id,
                                member.person_name, omp_id, address)

                    response = raw_input(
                        'Store OMP ID {} for {} [y/N]: '.format(
                            omp_id,
                            ascii_encode(member.person_name, 'replace')[0]))
                    if response.upper().startswith('Y'):
                        user_db.add_user(person_id, omp_id)
                        break

                else:
                    logger.info('No match found for: {} ({}: {})',
                                person_id, member.person_name,
                                ', '.join(addresses))

                    if taco_omp is not None:
                        # The OMP removes accented characters, so decompose
                        # to remove accents and then encode with ignore to remove.
                        person_name = unicodedata.normalize('NFKD', member.person_name)
                        person_name = ascii_encode(person_name, 'ignore')[0]
                        omp_id_inferred = taco_omp.call_class_method(
                            'OMP::User', 'infer_userid', person_name)
                        logger.info('OMP-inferred name: {}', omp_id_inferred)
                        for omp_id_value in omp_user_ids:
                            if omp_id_value.id.startswith(omp_id_inferred):
                                logger.info(
                                    'Possible match: {} ({})',
                                    omp_id_value.id, omp_id_value.name)

                    omp_id = raw_input(
                        'OMP ID for {}: '.format(
                            ascii_encode(member.person_name, 'replace')[0]))
                    if omp_id:
                        if len(omp_id) < 3:
                            logger.warning(
                                'OMP ID not 3 characters long, skipping...')
                        else:
                            user_db.add_user(person_id, omp_id.upper())
                    else:
                        logger.info('No OMP ID entered, skipping...')


if __name__ == '__main__':
    main()
