#!/usr/bin/env python2

# Copyright (C) 2015 East Asian Observatory
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,51 Franklin
# Street, Fifth Floor, Boston, MA  02110-1301, USA

"""
match_users - Attempt to match Hedwig users to OMP accounts

Usage:
    match_users [-v | -q] --semester <semester> --queue <queue> [--state <state>] [--skip-unregistered]

Options:

    --semester <semester>    Semester code
    --queue <queue>          Queue code
    --state <state>          Select proposals of given state [default: accepted]
    --skip-unregistered, -r  Skip unregistered proposal members
    --verbose, -v            Increase verbosity
    --quiet, -q              Decreate verbosity
"""

from __future__ import absolute_import, division, print_function, \
    unicode_literals

from codecs import ascii_encode, utf_8_decode
import logging
import sys

from docopt import docopt

from hedwig.config import get_database, get_facilities
from hedwig.util import get_logger
from hedwig.type import ProposalState

from hedwig2omp.config import get_config
from hedwig2omp.omp import OMPDB
from hedwig2omp.user import UserDB


def main():
    args = docopt(__doc__)

    telescope = 'JCMT'
    semester_code = utf_8_decode(args['--semester'])[0]
    queue_code = utf_8_decode(args['--queue'])[0]

    logging.basicConfig(level=(logging.DEBUG if args['--verbose']
                               else (logging.WARNING if args['--quiet']
                                     else logging.INFO)))
    logger = get_logger('match_users')

    logger.debug('Reading user lookup table')
    user_db = UserDB()
    users = user_db.get_all_users()

    logger.debug('Reading users from the OMP')
    omp_user = OMPDB().get_users_by_email()

    logger.debug('Connecting to Hedwig database')
    db = get_database()
    (facility_class,) = get_facilities(facility_spec=telescope)
    facility_id = db.ensure_facility(facility_class.get_code())
    facility = facility_class(facility_id)

    state = ProposalState.by_name(args['--state'])
    if state is None:
        logger.error('State "{}" not recognised', args['--state'])
        sys.exit(1)

    logger.debug('Finding proposals for this call')
    considered = set()
    for proposal in db.search_proposal(
            facility_id=facility_id,
            semester_code=semester_code,
            queue_code=queue_code,
            state=state,
            with_members=True).values():
        for member in proposal.members.values():
            if args['--skip-unregistered'] and not member.person_registered:
                continue

            person_id = member.person_id
            if person_id in considered:
                continue
            considered.add(person_id)

            if person_id in users:
                logger.debug('User already recognised: {} ({} = {})',
                             person_id, member.person_name,
                             users[person_id])
                continue

            addresses = []
            for email in db.search_email(person_id=person_id).values():
                address = email.address
                addresses.append(address)
                omp_id = omp_user.get(address)
                if omp_id is None:
                    continue

                logger.info('Found match by email address: {} ({} = {}, {})',
                            person_id, member.person_name, omp_id, address)

                response = raw_input(
                    'Store OMP ID {} for {} [y/N]: '.format(
                        omp_id, ascii_encode(member.person_name, 'replace')[0]))
                if response.upper().startswith('Y'):
                    user_db.add_user(person_id, omp_id)
                    break

            else:
                logger.info('No match found for: {} ({}: {})',
                            person_id, member.person_name,
                            ', '.join(addresses))

                omp_id = raw_input(
                    'OMP ID for {}: '.format(ascii_encode(member.person_name, 'replace')[0]))
                if omp_id:
                    user_db.add_user(person_id, omp_id.upper())
                else:
                    logger.info('No OMP ID entered, skipping...')


if __name__ == '__main__':
    main()
